// Code generated by protoc-gen-go. DO NOT EDIT.
// source: grpc.proto

package main

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GreetRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GreetRequest) Reset()         { *m = GreetRequest{} }
func (m *GreetRequest) String() string { return proto.CompactTextString(m) }
func (*GreetRequest) ProtoMessage()    {}
func (*GreetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bedfbfc9b54e5600, []int{0}
}

func (m *GreetRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GreetRequest.Unmarshal(m, b)
}
func (m *GreetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GreetRequest.Marshal(b, m, deterministic)
}
func (m *GreetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GreetRequest.Merge(m, src)
}
func (m *GreetRequest) XXX_Size() int {
	return xxx_messageInfo_GreetRequest.Size(m)
}
func (m *GreetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GreetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GreetRequest proto.InternalMessageInfo

func (m *GreetRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type GreetResponse struct {
	Greeting             string   `protobuf:"bytes,1,opt,name=greeting,proto3" json:"greeting,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GreetResponse) Reset()         { *m = GreetResponse{} }
func (m *GreetResponse) String() string { return proto.CompactTextString(m) }
func (*GreetResponse) ProtoMessage()    {}
func (*GreetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bedfbfc9b54e5600, []int{1}
}

func (m *GreetResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GreetResponse.Unmarshal(m, b)
}
func (m *GreetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GreetResponse.Marshal(b, m, deterministic)
}
func (m *GreetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GreetResponse.Merge(m, src)
}
func (m *GreetResponse) XXX_Size() int {
	return xxx_messageInfo_GreetResponse.Size(m)
}
func (m *GreetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GreetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GreetResponse proto.InternalMessageInfo

func (m *GreetResponse) GetGreeting() string {
	if m != nil {
		return m.Greeting
	}
	return ""
}

type StreamGreetRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamGreetRequest) Reset()         { *m = StreamGreetRequest{} }
func (m *StreamGreetRequest) String() string { return proto.CompactTextString(m) }
func (*StreamGreetRequest) ProtoMessage()    {}
func (*StreamGreetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bedfbfc9b54e5600, []int{2}
}

func (m *StreamGreetRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamGreetRequest.Unmarshal(m, b)
}
func (m *StreamGreetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamGreetRequest.Marshal(b, m, deterministic)
}
func (m *StreamGreetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamGreetRequest.Merge(m, src)
}
func (m *StreamGreetRequest) XXX_Size() int {
	return xxx_messageInfo_StreamGreetRequest.Size(m)
}
func (m *StreamGreetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamGreetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StreamGreetRequest proto.InternalMessageInfo

func (m *StreamGreetRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *StreamGreetRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type StreamGreetResponse struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Greeting             string   `protobuf:"bytes,2,opt,name=greeting,proto3" json:"greeting,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamGreetResponse) Reset()         { *m = StreamGreetResponse{} }
func (m *StreamGreetResponse) String() string { return proto.CompactTextString(m) }
func (*StreamGreetResponse) ProtoMessage()    {}
func (*StreamGreetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bedfbfc9b54e5600, []int{3}
}

func (m *StreamGreetResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamGreetResponse.Unmarshal(m, b)
}
func (m *StreamGreetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamGreetResponse.Marshal(b, m, deterministic)
}
func (m *StreamGreetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamGreetResponse.Merge(m, src)
}
func (m *StreamGreetResponse) XXX_Size() int {
	return xxx_messageInfo_StreamGreetResponse.Size(m)
}
func (m *StreamGreetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamGreetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StreamGreetResponse proto.InternalMessageInfo

func (m *StreamGreetResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *StreamGreetResponse) GetGreeting() string {
	if m != nil {
		return m.Greeting
	}
	return ""
}

func init() {
	proto.RegisterType((*GreetRequest)(nil), "GreetRequest")
	proto.RegisterType((*GreetResponse)(nil), "GreetResponse")
	proto.RegisterType((*StreamGreetRequest)(nil), "StreamGreetRequest")
	proto.RegisterType((*StreamGreetResponse)(nil), "StreamGreetResponse")
}

func init() { proto.RegisterFile("grpc.proto", fileDescriptor_bedfbfc9b54e5600) }

var fileDescriptor_bedfbfc9b54e5600 = []byte{
	// 212 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0x31, 0x4f, 0x86, 0x30,
	0x10, 0x86, 0x69, 0x83, 0x44, 0x4f, 0x21, 0xb1, 0x38, 0x18, 0x26, 0xd3, 0x89, 0xc4, 0xa4, 0x31,
	0x38, 0xc8, 0xaa, 0x0b, 0x93, 0x0b, 0x6c, 0x6e, 0x08, 0x17, 0xd2, 0x81, 0x52, 0x4b, 0xf5, 0xf7,
	0x1b, 0x9b, 0x42, 0xa8, 0xdf, 0xb7, 0xb5, 0xcd, 0xfb, 0xdc, 0xf3, 0xf6, 0x00, 0x26, 0xa3, 0x07,
	0xa1, 0xcd, 0x62, 0x17, 0xce, 0xe1, 0xa6, 0x31, 0x88, 0xb6, 0xc5, 0xaf, 0x6f, 0x5c, 0x2d, 0x63,
	0x10, 0xab, 0x7e, 0xc6, 0x7b, 0xf2, 0x40, 0xca, 0xab, 0xd6, 0x9d, 0xf9, 0x23, 0xa4, 0x3e, 0xb3,
	0xea, 0x45, 0xad, 0xc8, 0x0a, 0xb8, 0x9c, 0xfe, 0x1e, 0xa4, 0x9a, 0x7c, 0x70, 0xbf, 0xf3, 0x1a,
	0x58, 0x67, 0x0d, 0xf6, 0x73, 0x30, 0x36, 0x03, 0x2a, 0x47, 0x9f, 0xa5, 0x72, 0xdc, 0x35, 0xf4,
	0xa0, 0x79, 0x85, 0x3c, 0x20, 0xbd, 0xec, 0x3f, 0x7a, 0x94, 0xd3, 0x50, 0x5e, 0xbd, 0xc0, 0x75,
	0x63, 0xf4, 0xd0, 0xa1, 0xf9, 0x91, 0x03, 0xb2, 0x12, 0x2e, 0xdc, 0x2c, 0x96, 0x8a, 0x63, 0x9b,
	0x22, 0x13, 0x81, 0x82, 0x47, 0xd5, 0x3b, 0xdc, 0x3a, 0xd0, 0xf9, 0x37, 0xbc, 0xde, 0xf0, 0x5c,
	0x9c, 0x7e, 0xa9, 0xb8, 0x13, 0x67, 0xda, 0xf2, 0xa8, 0x24, 0x4f, 0xe4, 0x2d, 0xf9, 0x88, 0xe7,
	0x5e, 0xaa, 0xcf, 0xc4, 0x2d, 0xf9, 0xf9, 0x37, 0x00, 0x00, 0xff, 0xff, 0xa2, 0x45, 0x91, 0xa1,
	0x72, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GrpcServiceClient is the client API for GrpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GrpcServiceClient interface {
	Greet(ctx context.Context, in *GreetRequest, opts ...grpc.CallOption) (*GreetResponse, error)
}

type grpcServiceClient struct {
	cc *grpc.ClientConn
}

func NewGrpcServiceClient(cc *grpc.ClientConn) GrpcServiceClient {
	return &grpcServiceClient{cc}
}

func (c *grpcServiceClient) Greet(ctx context.Context, in *GreetRequest, opts ...grpc.CallOption) (*GreetResponse, error) {
	out := new(GreetResponse)
	err := c.cc.Invoke(ctx, "/GrpcService/Greet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GrpcServiceServer is the server API for GrpcService service.
type GrpcServiceServer interface {
	Greet(context.Context, *GreetRequest) (*GreetResponse, error)
}

func RegisterGrpcServiceServer(s *grpc.Server, srv GrpcServiceServer) {
	s.RegisterService(&_GrpcService_serviceDesc, srv)
}

func _GrpcService_Greet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GreetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServiceServer).Greet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GrpcService/Greet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServiceServer).Greet(ctx, req.(*GreetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GrpcService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "GrpcService",
	HandlerType: (*GrpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Greet",
			Handler:    _GrpcService_Greet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc.proto",
}

// GrpcStreamServiceClient is the client API for GrpcStreamService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GrpcStreamServiceClient interface {
	Greet(ctx context.Context, opts ...grpc.CallOption) (GrpcStreamService_GreetClient, error)
}

type grpcStreamServiceClient struct {
	cc *grpc.ClientConn
}

func NewGrpcStreamServiceClient(cc *grpc.ClientConn) GrpcStreamServiceClient {
	return &grpcStreamServiceClient{cc}
}

func (c *grpcStreamServiceClient) Greet(ctx context.Context, opts ...grpc.CallOption) (GrpcStreamService_GreetClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GrpcStreamService_serviceDesc.Streams[0], "/GrpcStreamService/Greet", opts...)
	if err != nil {
		return nil, err
	}
	x := &grpcStreamServiceGreetClient{stream}
	return x, nil
}

type GrpcStreamService_GreetClient interface {
	Send(*StreamGreetRequest) error
	Recv() (*StreamGreetResponse, error)
	grpc.ClientStream
}

type grpcStreamServiceGreetClient struct {
	grpc.ClientStream
}

func (x *grpcStreamServiceGreetClient) Send(m *StreamGreetRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *grpcStreamServiceGreetClient) Recv() (*StreamGreetResponse, error) {
	m := new(StreamGreetResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GrpcStreamServiceServer is the server API for GrpcStreamService service.
type GrpcStreamServiceServer interface {
	Greet(GrpcStreamService_GreetServer) error
}

func RegisterGrpcStreamServiceServer(s *grpc.Server, srv GrpcStreamServiceServer) {
	s.RegisterService(&_GrpcStreamService_serviceDesc, srv)
}

func _GrpcStreamService_Greet_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GrpcStreamServiceServer).Greet(&grpcStreamServiceGreetServer{stream})
}

type GrpcStreamService_GreetServer interface {
	Send(*StreamGreetResponse) error
	Recv() (*StreamGreetRequest, error)
	grpc.ServerStream
}

type grpcStreamServiceGreetServer struct {
	grpc.ServerStream
}

func (x *grpcStreamServiceGreetServer) Send(m *StreamGreetResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *grpcStreamServiceGreetServer) Recv() (*StreamGreetRequest, error) {
	m := new(StreamGreetRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _GrpcStreamService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "GrpcStreamService",
	HandlerType: (*GrpcStreamServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Greet",
			Handler:       _GrpcStreamService_Greet_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "grpc.proto",
}
